import { useState } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Textarea } from "@/components/ui/textarea";
import { Badge } from "@/components/ui/badge";
import { Progress } from "@/components/ui/progress";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { 
  Shield, 
  AlertTriangle, 
  CheckCircle, 
  XCircle, 
  Scan,
  FileCode,
  Bug,
  Lock
} from "lucide-react";

interface Vulnerability {
  id: string;
  severity: "critical" | "high" | "medium" | "low";
  title: string;
  description: string;
  file: string;
  line: number;
  recommendation: string;
}

export default function VulnerabilityScanner() {
  const [code, setCode] = useState("");
  const [isScanning, setIsScanning] = useState(false);
  const [scanProgress, setScanProgress] = useState(0);
  const [vulnerabilities, setVulnerabilities] = useState<Vulnerability[]>([]);
  const [scanComplete, setScanComplete] = useState(false);

  const handleScan = async () => {
    if (!code.trim()) return;
    
    setIsScanning(true);
    setScanProgress(0);
    setVulnerabilities([]);
    setScanComplete(false);

    // Simulate scanning progress
    const interval = setInterval(() => {
      setScanProgress(prev => {
        if (prev >= 100) {
          clearInterval(interval);
          setIsScanning(false);
          setScanComplete(true);
          
          // Mock vulnerabilities for demo
          setVulnerabilities([
            {
              id: "1",
              severity: "high",
              title: "SQL Injection Risk",
              description: "Direct string concatenation in SQL query",
              file: "database.js",
              line: 42,
              recommendation: "Use parameterized queries or prepared statements"
            },
            {
              id: "2",
              severity: "medium",
              title: "Cross-Site Scripting (XSS)",
              description: "Unescaped user input in HTML output",
              file: "template.js",
              line: 15,
              recommendation: "Sanitize user input before rendering"
            },
            {
              id: "3",
              severity: "low",
              title: "Weak Password Policy",
              description: "Password requirements are too lenient",
              file: "auth.js",
              line: 78,
              recommendation: "Implement stronger password requirements"
            }
          ]);
          
          return 100;
        }
        return prev + 10;
      });
    }, 200);
  };

  const getSeverityColor = (severity: string) => {
    switch (severity) {
      case "critical": return "bg-red-500";
      case "high": return "bg-orange-500";
      case "medium": return "bg-yellow-500";
      case "low": return "bg-blue-500";
      default: return "bg-gray-500";
    }
  };

  const getSeverityIcon = (severity: string) => {
    switch (severity) {
      case "critical": return <XCircle className="h-4 w-4 text-red-500" />;
      case "high": return <AlertTriangle className="h-4 w-4 text-orange-500" />;
      case "medium": return <AlertTriangle className="h-4 w-4 text-yellow-500" />;
      case "low": return <CheckCircle className="h-4 w-4 text-blue-500" />;
      default: return <Shield className="h-4 w-4 text-gray-500" />;
    }
  };

  return (
    <div className="h-full w-full p-6 bg-gray-50">
      <Card className="h-full">
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Shield className="h-6 w-6" />
            Security Vulnerability Scanner
          </CardTitle>
        </CardHeader>
        <CardContent className="h-full">
          <Tabs defaultValue="scanner" className="h-full">
            <TabsList className="grid w-full grid-cols-2">
              <TabsTrigger value="scanner">Code Scanner</TabsTrigger>
              <TabsTrigger value="results">Results</TabsTrigger>
            </TabsList>

            <TabsContent value="scanner" className="mt-6 space-y-4">
              <div>
                <label className="text-sm font-medium mb-2 block">
                  Code to Scan
                </label>
                <Textarea
                  placeholder="Paste your code here for security analysis..."
                  value={code}
                  onChange={(e) => setCode(e.target.value)}
                  className="h-64 font-mono text-sm"
                />
              </div>

              {isScanning && (
                <div className="space-y-2">
                  <div className="flex items-center gap-2">
                    <Scan className="h-4 w-4 animate-spin" />
                    <span className="text-sm">Scanning for vulnerabilities...</span>
                  </div>
                  <Progress value={scanProgress} className="w-full" />
                </div>
              )}

              <Button 
                onClick={handleScan}
                disabled={!code.trim() || isScanning}
                className="w-full"
              >
                {isScanning ? (
                  <>
                    <Scan className="h-4 w-4 mr-2 animate-spin" />
                    Scanning...
                  </>
                ) : (
                  <>
                    <Shield className="h-4 w-4 mr-2" />
                    Start Security Scan
                  </>
                )}
              </Button>
            </TabsContent>

            <TabsContent value="results" className="mt-6">
              {!scanComplete ? (
                <div className="text-center py-12 text-gray-500">
                  <Shield className="h-12 w-12 mx-auto mb-4 opacity-50" />
                  <p>Run a security scan to see results</p>
                </div>
              ) : (
                <div className="space-y-4">
                  <div className="flex items-center justify-between">
                    <h3 className="text-lg font-semibold">Scan Results</h3>
                    <Badge variant="outline">
                      {vulnerabilities.length} issues found
                    </Badge>
                  </div>

                  <div className="grid grid-cols-4 gap-4 mb-6">
                    {["critical", "high", "medium", "low"].map((severity) => {
                      const count = vulnerabilities.filter(v => v.severity === severity).length;
                      return (
                        <Card key={severity}>
                          <CardContent className="p-4 text-center">
                            <div className={`w-8 h-8 rounded-full ${getSeverityColor(severity)} mx-auto mb-2 flex items-center justify-center`}>
                              <span className="text-white text-sm font-bold">{count}</span>
                            </div>
                            <p className="text-sm font-medium capitalize">{severity}</p>
                          </CardContent>
                        </Card>
                      );
                    })}
                  </div>

                  <div className="space-y-3">
                    {vulnerabilities.map((vuln) => (
                      <Card key={vuln.id} className="border-l-4" style={{borderLeftColor: getSeverityColor(vuln.severity).replace('bg-', '')}}>
                        <CardContent className="p-4">
                          <div className="flex items-start gap-3">
                            {getSeverityIcon(vuln.severity)}
                            <div className="flex-1">
                              <div className="flex items-center gap-2 mb-1">
                                <h4 className="font-medium">{vuln.title}</h4>
                                <Badge variant="outline" className="text-xs">
                                  {vuln.severity}
                                </Badge>
                              </div>
                              <p className="text-sm text-gray-600 mb-2">{vuln.description}</p>
                              <div className="flex items-center gap-4 text-xs text-gray-500 mb-2">
                                <span className="flex items-center gap-1">
                                  <FileCode className="h-3 w-3" />
                                  {vuln.file}:{vuln.line}
                                </span>
                              </div>
                              <div className="bg-blue-50 border border-blue-200 rounded p-2">
                                <p className="text-sm text-blue-800">
                                  <strong>Recommendation:</strong> {vuln.recommendation}
                                </p>
                              </div>
                            </div>
                          </div>
                        </CardContent>
                      </Card>
                    ))}
                  </div>
                </div>
              )}
            </TabsContent>
          </Tabs>
        </CardContent>
      </Card>
    </div>
  );
}
